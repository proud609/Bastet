{
  "name": "chainlink",
  "nodes": [
    {
      "parameters": {
        "content": "## Knowledge:\nChainlink\nhttps://medium.com/cyfrin/chainlink-oracle-defi-attacks-93b6cb6541bf#99af",
        "height": 120,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-3640, -700],
      "id": "0f56cc7d-909c-4b4c-b2a8-5a37d0580cca",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "### Not Checking For Stale Prices\nhttps://github.com/sherlock-audit/2023-05-USSD/blob/main/ussd-contracts/contracts/oracles/StableOracleDAI.sol#L48",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, -1200],
      "id": "039fd270-1e00-4ad8-87c9-ff475a0ee3f5",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "### Not Checking For Down L2 Sequencer\nhttps://github.com/sherlock-audit/2023-02-gmx/blob/main/gmx-synthetics/contracts/oracle/Oracle.sol#L569-L579",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, -1000],
      "id": "1a75c367-a79f-466f-ad8f-243260ae9555",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "### Same Heartbeat Used For Multiple Price Feeds\nhttps://github.com/sherlock-audit/2023-04-jojo/blob/main/smart-contract-EVM/contracts/adaptor/chainlinkAdaptor.sol#L43-L55",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, -800],
      "id": "d6c28820-dc2a-4010-aa64-a2541b8faa34",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "### Oracle Price Feeds Not Updated Frequently\nhttps://github.com/balancer/balancer-v2-monorepo/blob/80e1a5db7439069e2cb53e228bce0a8a51f5b23e/pkg/pool-weighted/contracts/oracle/OracleWeightedPool.sol#L156-L161",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, -600],
      "id": "79951526-fcfe-4e0e-b817-b86788744145",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "### Assuming Oracle Price Precision\nhttps://github.com/code-423n4/2021-12-vader/blob/00ed84015d4116da2f9db0c68db6742c89e73f65/contracts/lbt/LiquidityBasedTWAP.sol#L393-L409",
        "width": 390
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, -400],
      "id": "e8912beb-ec78-416e-8511-e07e4237e15a",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "### Incorrect Oracle Price Feed Address\nhttps://github.com/code-423n4/2021-12-yetifinance/blob/1da782328ce4067f9654c3594a34014b0329130a/packages/contracts/contracts/PriceFeed.sol#L578",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, -180],
      "id": "87db5687-6011-4b9e-91cd-18ccea160357",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "### Oracle Price Updates Can Be Front-Run\nhttps://github.com/sherlock-audit/2023-05-USSD/blob/main/ussd-contracts/contracts/USSD.sol#L150-L173",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, 20],
      "id": "2e354c39-b999-460d-bc32-ad0179797dcf",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "### Unhandled Oracle Revert Denial Of Service\nhttps://github.com/code-423n4/2022-10-inverse/blob/main/src/Oracle.sol#L78-L105",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, 200],
      "id": "1d665852-ad75-495a-8848-95744529e0ee",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "content": "### Unhandled Depeg Of Bridged Assets\nhttps://github.com/sherlock-audit/2023-05-USSD-judging/issues/310",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, 380],
      "id": "0ddc4cce-d751-4ed8-9104-7380e408095d",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "### Oracle Returns Incorrect Price During Flash Crashes\nhttps://github.com/sherlock-audit/2023-05-USSD-judging/issues/598",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1580, 580],
      "id": "4fcdad1b-7f14-4b57-8cc7-287ab769cb42",
      "name": "Sticky Note10"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [-2812, -1120],
      "id": "4130d47f-28a2-4656-a950-ce64dd4d8db5",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "6qICvMVQ9Mixvcjz",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"array\",\n  \"items\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"summary\": {\n        \"type\": \"string\",\n        \"description\": \"Brief summary of the vulnerability\"\n      },\n      \"severity\": {\n        \"type\": \"string\",\n        \"items\": {\n          \"type\": \"string\",\n          \"enum\": [\"high\", \"medium\", \"low\"]\n        },\n        \"description\": \"Severity level of the vulnerability\"\n      },\n      \"vulnerability_details\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"function_name\": {\n            \"type\": \"string\",\n            \"description\": \"Function name where the vulnerability is found\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"Detailed description of the vulnerability\"\n          }\n        },\n        \"required\": [\"function_name\", \"description\"]\n      },\n      \"code_snippet\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"description\": \"Code snippet showing the vulnerability\",\n        \"default\": []\n      },\n      \"recommendation\": {\n        \"type\": \"string\",\n        \"description\": \"Recommendation to fix the vulnerability\"\n      }\n    },\n    \"required\": [\"summary\", \"severity\", \"vulnerability_details\", \"code_snippet\", \"recommendation\"]\n  },\n  \"additionalProperties\": false\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [-2692, -1120],
      "id": "a2857a08-23dc-464f-a89f-cb6f6342506f",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "61275b63-9ad4-4d35-9808-ec60e24829a1",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [-3720, -990],
      "id": "67f5a987-4aca-4715-89ea-6b0b4e7f34c7",
      "name": "Webhook",
      "webhookId": "61275b63-9ad4-4d35-9808-ec60e24829a1"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $execution.id }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [-3280, -1140],
      "id": "d8933d34-2a70-4268-b99d-f0ddbd0a812b",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f2ff88d9-a21f-4e9a-819c-9d20bcd7685f",
              "name": "chatInput",
              "value": "{{ $json.body.prompt }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-3060, -990],
      "id": "140d148a-a22d-4f07-b262-8f38cb5ed9c7",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Not Checking For Down L2 Sequencer**\nWhen using Chainlink data on L2 chains like Arbitrum, if the L2 Sequencer is down, the feed may return seemingly “fresh” data that is actually unreliable.\n\n### Examples\n\n#### Example 1: Incorrect Example (_validateAndGetPrice() doesn't check If Arbitrum sequencer is down in Chainlink feeds)\n\n  ```solidity\nsolidity function _validateAndGetPrice(AggregatorV2V3Interface feed_, uint48 updateThreshold_)\n        internal\n        view\n        returns (uint256)\n    {\n        // Get latest round data from feed\n        (uint80 roundId, int256 priceInt, , uint256 updatedAt, uint80 answeredInRound) = feed_\n            .latestRoundData();\n        // @audit check if Arbitrum L2 sequencer is down in Chainlink feeds: medium\n        // Validate chainlink price feed data\n        // 1. Answer should be greater than zero\n        // 2. Updated at timestamp should be within the update threshold\n        // 3. Answered in round ID should be the same as the round ID\n        if (\n            priceInt <= 0 ||\n            updatedAt < block.timestamp - uint256(updateThreshold_) ||\n            answeredInRound != roundId\n        ) revert BondOracle_BadFeed(address(feed_));\n        return uint256(priceInt);\n    }\n  ```\n\n#### Example 2: Correct Example (check sequencer is active)\n\n  ```solidity\nfunction getPrice(address token) external view override returns (uint) {\n    if (!isSequencerActive()) revert Errors.L2SequencerUnavailable();\n    ...\n}\n\nfunction isSequencerActive() internal view returns (bool) {\n    (, int256 answer, uint256 startedAt,,) = sequencer.latestRoundData();\n    if (block.timestamp - startedAt <= GRACE_PERIOD_TIME || answer == 1)\n        return false;\n    return true;\n}\n  ```\n\n**Suggestion**\n\nFollow Chainlink’s official documentation and check the status of the Sequencer before calling price data to ensure its validity.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, -940],
      "id": "311fb901-bc3f-48b0-964a-9e566853f4cb",
      "name": "Chainlink-Not Checking For Down L2 Sequencer",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Not Checking For Stale Prices**\nWhen a smart contract calls Chainlink’s price feed (e.g., latestRoundData()), it fails to verify whether the returned data is outdated. Without checking the latest update time, the contract may use stale data for calculations, resulting in financial losses for users or protocols.\n\n### Examples\n\n#### Example 1: Incorrect Example (No check on updatedAt parameter)\n\n  ```solidity\n  // @audit no check for stale price data\n  (, int256 price, , , ) = priceFeedDAIETH.latestRoundData();\n\n  return\n      (wethPriceUSD * 1e18) /\n      ((DAIWethPrice + uint256(price) * 1e10) / 2);\n  ```\n\n#### Example 2: Correct Example (Verifying update time)\n\n  ```solidity\n  // @audit fixed to check for stale price data\n  (, int256 price, , uint256 updatedAt, ) = priceFeedDAIETH.latestRoundData();\n\n  if (updatedAt < block.timestamp - 60 * 60 /* 1 hour */) {\n     revert(\"stale price feed\");\n  }\n\n  return\n      (wethPriceUSD * 1e18) /\n      ((DAIWethPrice + uint256(price) * 1e10) / 2);\n  ```\n\n**Suggestion**\n\nSet a reasonable stale threshold based on the \"Heartbeat\" interval of the price feed being used. This value can be found by selecting the \"Show More Details\" option in Chainlink’s official list.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, -1340],
      "id": "08d156c5-7156-4581-b7d8-c8c466ce517d",
      "name": "Chainlink-Not Checking For Stale Prices",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Same Heartbeat Used For Multiple Price Feeds**\nWhen a smart contract uses multiple price feeds, it should not assume that all feeds have the same heartbeat interval.\n\n### Examples\n\n#### Example 1: Incorrect Example\n\nSmart contracts often use multiple oracle price feeds to track prices for multiple assets. It is an error to assume that the same time interval heartbeat can be used as a staleness check for every feed, as different feeds can have different heartbeats\n\n  ```solidity\nfunction getMarkPrice() external view returns (uint256 price) {\n  int256 rawPrice;\n  uint256 updatedAt;\n  // @audit first feed\n  (, rawPrice, , updatedAt, ) = IChainlink(chainlink).latestRoundData();\n\n  // @audit second feed\n  (, int256 USDCPrice,, uint256 USDCUpdatedAt,) = IChainlink(USDCSource).latestRoundData();\n  \n  require( // @audit feed #1 stale check using same heartbeatInterval\n  block.timestamp - updatedAt <= heartbeatInterval,\n  \"ORACLE_HEARTBEAT_FAILED\"\n  );       \n           // @audit feed #2 stale check using same heartbeatInterval\n  require(block.timestamp - USDCUpdatedAt <= heartbeatInterval, \"USDC_ORACLE_HEARTBEAT_FAILED\");\n  uint256 tokenPrice = (SafeCast.toUint256(rawPrice) * 1e8) / SafeCast.toUint256(USDCPrice);\n  return tokenPrice * 1e18 / decimalsCorrection;\n}\n  ```\n\nIn this example, the first price feed has a heartbeat of 1 hour while the second has a heartbeat of 24 hours, so they require different heartbeats to be used in their staleness checks. \n\n\n**Suggestion**\n\nUse the heartbeat value displayed in the Chainlink list for each price feed individually to validate data freshness.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, -740],
      "id": "283ad600-d7c4-4976-a83b-a91cc19fd790",
      "name": "Chainlink-Same Heartbeat Used For Multiple Price Feeds"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Oracle Price Feeds Not Updated Frequently**\nIf the selected price feed is not updated frequently enough, the contract may use outdated prices that deviate from the actual market prices.\n\n### Examples\n\n#### Example 1: Incorrect Example\n\noracle is using the HEARTBEAT_TIME as 24 hours. Since the price of oracle could vary in the time gap of 3 hours, using 24 hours could be still dangerous.\n\n```solidity\nuint256 private constant HEARTBEAT_TIME = 24 hours; //Check heartbeat frequency when adding new feeds\n```\n\nIn this example, the first price feed has a heartbeat of 1 hour while the second has a heartbeat of 24 hours, so they require different heartbeats to be used in their staleness checks. \n\n#### Example 2: Incorrect Example\n\nThe _isPoolSafe() function checks if the balancer pool spot price is within the boundaries defined by THRESHOLD respect to the last fetched chainlink price.\n\nSince in _valueCollateral() the updateThreshold should be 24 hours (as in the tests), then the OHM derived oracle price could stay at up to 2% from the on-chain trusted price. The value is 2% because in WstethLiquidityVault.sol#L223:\n\n```solidity\nreturn (amount_ * stethPerWsteth * stethUsd * decimalAdjustment) / (ohmEth * ethUsd * 1e18);\n```\n\nstethPerWsteth is mostly stable and changes in stethUsd and ethUsd will cancel out, so the return value changes will be close to changes in ohmEth, so up to 2% from the on-chain trusted price.\n\nIf THRESHOLD < 2%, say 1% as in the tests, then the Chainlink price can deviate by more than 1% from the pool spot price and less than 2% from the on-chain trusted price fro up to 24 h. During this period withdrawals and deposits will revert.\n\n\n**Suggestion**\n\nSmart contracts developers should use & auditors should check that price feeds with the lowest heartbeat & deviation thresholds are being used to ensure the oracle’s reported price is as close as possible to the true, current price.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, -540],
      "id": "47fdef1f-1101-4a70-a1bb-ffe989e29536",
      "name": "Chainlink-Oracle Price Feeds Not Updated Frequently",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Request Confirmation < Depth of Chain Re-Orgs**\nWhen requesting randomness, the REQUEST_CONFIRMATION parameter must be greater than the depth of common chain re-organizations on the target chain(s) the contract is to be deployed on, as chain re-organizations re-order blocks & transactions, which can affect the returned randomness.\n\nThis could result in a winner becoming a loser or vice-versa due to the chain re-organization re-ordering the randomness request, resulting in a different randomness result.\n\n### Examples\n\n#### Example 1: Incorrect Example\n\nThis parameter is found in the contract that inherits from VRFConsumerBaseV2:\n\n```solidity\ncontract VRFv2Consumer is VRFConsumerBaseV2 {\n    // @audit REQUEST_CONFIRMATIONS = how many blocks confirmed\n    // before receiving randomness. Must be greater than depth\n    // of common chain reorganisations that occur on target chain.\n    //\n    // eg polygon has 5+ block re-orgs per day with depth > 3 blocks\n    // and frequently has re-orgs with depth < 30 blocks\n    //\n    // when your transaction for requesting randomness from VRF is moved\n    // to a different block then the returned randonmness can change\n    // meaning the winner as determined by the returned randonmness\n    // can also change!\n    uint16 internal constant REQUEST_CONFIRMATIONS = 3;\n```\n\nThis parameter will often have the value of 3 because this is the default value in the official Chainlink tutorial, so is simply copied without much thought by developers. Smart contract developers & auditors should confirm whether the value of REQUEST_CONFIRMATIONS is suitable for the targeted chain(s) the smart contract will be deployed on. If the smart contract is to be deployed upon multiple chains, a different value for REQUEST_CONFIRMATIONS may be required for each deployment.\n\n**Suggestion**\n\nIn principle, miners/validators of your underlying blockchain could rewrite the chain's history to put a randomness request from your contract into a different block, which would result in a different VRF output. Note that this does not enable a miner to determine the random value in advance. It only enables them to get a fresh random value that might or might not be to their advantage. By way of analogy, they can only re-roll the dice, not predetermine or predict which side it will land on.\n\nYou must choose an appropriate confirmation time for the randomness requests you make. Confirmation time is how many blocks the VRF service waits before writing a fulfillment to the chain to make potential rewrite attacks unprofitable in the context of your application and its value-at-risk.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, -340],
      "id": "3a21ca3f-403a-49d3-93e3-5c3b8935a5e2",
      "name": "Chainlink-Request Confirmation < Depth of Chain Re-Orgs",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Assuming Oracle Price Precision**\nWhen working with Oracle price feeds, developers must account for different price feeds having different decimal precision; it is an error to assume that every price feed will report prices using the same precision. Generally, non-ETH pairs report using 8 decimals, while ETH pairs report using 18 decimals.\n\nIf precision is assumed, there is plenty of room for developer mistakes to be made since, for example, ETH/USD reports using 8 decimals, as it is considered a non-ETH pair since the price of ETH is being reported in USD. There are also price feeds such as AMPL/USD that report using 18 decimals which breaks the general rule that USD price feeds report in 8 decimals.\n\n**Suggestion**\n\nSmart contracts can call AggregatorV3Interface.decimals() to get the exact number of decimals for the price feed being called.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, -140],
      "id": "65a80715-e671-4ff8-a734-90265e3f9647",
      "name": "Chainlink-Assuming Oracle Price Precision",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Incorrect Oracle Price Feed Address**\nSome projects will hard-code oracle price feed addresses. Others will have addresses in deploy scripts to be set during contract deployment. Wherever the addresses are located, auditors should check that they point to the correct oracle price feed.\n\n### Examples\n\n#### Example 1: Incorrect Example\n\n```solidity\n// @audit correct address here, but wrong address in constructor\n// chainlink btc/usd priceFeed 0xf4030086522a5beea4988f8ca5b36dbc97bee88c;\ncontract StableOracleWBTC is IStableOracle {\n    AggregatorV3Interface priceFeed;\n\n    constructor() {\n        priceFeed = AggregatorV3Interface(\n            // @audit wrong address; this is ETH/USD not BTC/USD !\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n        );\n    }\n```\n\nHere the correct address for the BTC/USD price feed appears in the comment, but in the constructor, the address of the ETH/USD price feed incorrectly appears. \n\n**Suggestion**\n\nAuditors should verify that price feed addresses are correct by referring to Chainlink’s list of Ethereum mainnet price feeds. For projects being deployed on L2s or alternate L1s, auditors should verify that correct price feed addresses are being used for those networks.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, 60],
      "id": "6e84f60f-773a-43f4-bf5a-253ca7a758a2",
      "name": "Chainlink-Incorrect Oracle Price Feed Address",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Oracle Price Updates Can Be Front-Run**\nSome stablecoin protocols that allow users to deposit collateral and mint/burn stablecoin tokens based upon prices of collateral assets can be subject to having value extracted from the protocol by having their oracle updates sandwich attacked.\n\nOracle price updates may be too slow behind real-world prices due to only updating after a set deviation % of price change, plus attackers may see oracle updates in the mempool & front-run them. \n\n**Suggestion**\n\nThis is a complicated problem to solve; potential solutions involve:\n\n1.adding a small fee to mint/burn operations to make the frequent minting/burning which occurs in sandwich attacks less profitable\n2.when a user makes a deposit, enforce a delay that prevents them from withdrawing in a short amount of time to prevent sandwich attacks\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, 260],
      "id": "cd803b03-fca7-4211-8820-96578adc02c1",
      "name": "Chainlink-Oracle Price Updates Can Be Front-Run",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Unhandled Oracle Revert Denial Of Service**\nCalls to Oracles could potentially revert, which may result in a complete Denial-of-Service to smart contracts which depend upon them. Chainlink multisigs can immediately block access to price feeds at will, so just because a price feed is working today does not mean it will continue to do so indefinitely.\n\n**Suggestion**\n\nSmart contracts should handle \"Unhandled Oracle Revert Denial Of Service\" by:\n\nwrapping calls to Oracles in try/catch blocks and dealing appropriately with any errors,\nproviding functionality to replace or update oracle feeds after they are configured.\nIf a configured Oracle feed has malfunctioned or ceased operating, but the smart contract does not have any alternative data source, nor does the contract allow updates to data sources, that contract will be permanently bricked.\n\nThis would be especially bad for stablecoin protocols and lending/borrowing platforms where large amounts of user value are stored in the form of collateral that would no longer be able to be withdrawn due to calls to the price oracles reverting.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, 460],
      "id": "5e8c5e4e-c741-4b82-9427-e509155fdb5b",
      "name": "Chainlink-Unhandled Oracle Revert Denial Of Service",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Unhandled Depeg Of Bridged Assets**\nConsider a Lending & Borrowing protocol where:\n\nusers can deposit a wrapped asset such as WBTC (wrapped BTC) and borrow against it,\nthe protocol uses Chainlink’s BTC/USD feed to price WBTC,\nIf the WBTC bridge is compromised and WBTC depegs from BTC, the protocol will continue to price WBTC using the BTC/USD price, even though WBTC will instantly become worth far less than native BTC due to the bridge compromise.\n\nUsers could then buy WBTC for a far lower value than native BTC, deposit it into the protocol, and borrow against it using the value of native BTC. This would allow attackers to drain the protocol in the event of a bridge compromise leading to a depeg event.\n\n**Suggestion**\n\nthe protocol could use Chainlink’s WBTC/BTC price feed to monitor for a depeg event.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, 660],
      "id": "fd3980ab-51ea-4f57-aee0-5a2afd64243f",
      "name": "Chainlink-Unhandled Depeg Of Bridged Assets",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Oracle Returns Incorrect Price During Flash Crashes**\nChainlink price feeds have in-built minimum & maximum prices they will return; if during a flash crash, bridge compromise, or depegging event, an asset’s value falls below the price feed’s minimum price, the oracle price feed will continue to report the (now incorrect) minimum price.\n\nAn attacker could:\n\nbuy that asset using a decentralized exchange at the very low price,\ndeposit the asset into a Lending / Borrowing platform using Chainlink’s price feeds,\nborrow against that asset at the minimum price Chainlink’s price feed returns, even though the actual price is far lower.\nThis attack would let the attacker drain value from Lending / Borrowing platforms. To help mitigate such an attack on-chain, smart contracts could check that minAnswer < receivedAnswer < maxAnswer.\n\nThis attack could also potentially be mitigated off-chain via off-chain monitoring, which compares Chainlink’s latest reported price to other off-chain sources such as centralized exchanges and/or liquid indexes which aggregate multiple off-chain price sources to produce one index price; if external sources are reporting prices lower than Chainlink’s minAnswer, off-chain monitoring could disable the smart contract’s price feed for that asset, forcing any transactions to revert.\n\n**Suggestion**\n\nDevelopers & Auditors can find Chainlink’s oracle feed [minAnswer, maxAnswer] values by:\n\nlooking up the price feed address on Chainlink’s list of Ethereum mainnet price feeds (or select other L1/L2 for price feeds on other networks),\nreading the “aggregator” value, e.g., for AAVE / USD price feed,\nreading the minAnswer & maxAnswer values from the aggregator contract\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, 860],
      "id": "ee1e85f0-a049-4200-8beb-a5608ce463d1",
      "name": "Chainlink-Oracle Returns Incorrect Price During Flash Crashes",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\nMarket participants should not be able to place a bet or other input after a randomness request has been made, which will return the result of a lottery or other form of draw, as an attacker would be able to front-run the randomness response by inspecting the winning result then purchasing a ticket with the winning inputs.\n\n**Suggestion**\n\nBetting should be prohibited or frozen once the randomness request is issued, ensuring that no user actions are allowed before the random result is generated to prevent front-running attacks.\n\nConsider the example of a contract that mints a random NFT in response to a user's actions.\n\nThe contract should:\n\n*Record whatever actions of the user may affect the generated NFT.\n*Stop accepting further user actions that might affect the generated NFT and issue a randomness request.\n*On randomness fulfillment, mint the NFT.\n\nGenerally speaking, whenever an outcome in your contract depends on some user-supplied inputs and randomness, the contract should not accept any additional user-supplied inputs after it submits the randomness request.\n\nOtherwise, the cryptoeconomic security properties may be violated by an attacker who can rewrite the chain.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, 1060],
      "id": "c29e1cd9-9b0e-45d4-ad5a-d4ae57467d2f",
      "name": "Chainlink-Placing Bets After Randomness Request",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Re-requesting Randomness**\nIf a smart contract allows re-requesting randomness, a VRF service provider could exploit this feature. When the initially returned random number is unfavorable to a certain party, the provider might delay or reject the first request and subsequently re-request a more favorable random result, thereby manipulating the final outcome.\n\nThis behavior could compromise true randomness, affecting outcomes, fairness, or other decisions that rely on the randomness mechanism.\n\n**Suggestion**\n\nRestrict the ability to re-request randomness and ensure there is no interaction between the requester and the service provider that could allow manipulation of the returned random number. When necessary, refer to the latest Chainlink VRF security best practices to implement mitigation measures.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output a empty array\n\nOtherwise, follow the format below:\n\n```\n[\n    {\n        \"summary\":  \"summary of the vulnerabilities\",\n        \"vulnerability_details\": {\n            \"function_name\": \"Name of the function\",\n            \"description\": \"a brief description of the vulnerability\"\n        },\n    \n        \"code_snippet\": [\n            \"code snippet in the file\"\n        ],\n    \n        \"recommendation\": \"recommendation of how to fix the vulnerability\"\n    \n    }\n]\n```"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [-2840, 1260],
      "id": "2c23c2a6-1afa-4af5-9060-c4eda2793ef6",
      "name": "Chainlink-Re-requesting Randomness",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [-2464, 1060],
      "id": "6734b202-aadd-4edb-a2c7-4eb7df00a029",
      "name": "Merge3"
    },
    {
      "parameters": {
        "numberInputs": 10
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [-2464, -387],
      "id": "435dfc98-a4d7-43a8-b658-9d4cd2e67d1c",
      "name": "Merge4"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [-2244, 360],
      "id": "96191e1f-8a6d-4554-a056-003fbf429b65",
      "name": "Merge5"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [-3060, 1010],
      "id": "3d775d06-22be-4cdf-b1fd-c4f71e76b234",
      "name": "When chat message received",
      "webhookId": "e2d689b8-1b1d-4b65-9a99-45efc7282832"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [-2024, 360],
      "id": "7e8327b2-6146-4547-ba9a-c33d774f9dbd",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "162cf072-03ec-49a2-b87d-820eb155c89e",
              "leftValue": "={{ $json.body.mode }}",
              "rightValue": "trace",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-3500, -990],
      "id": "718ccf3f-6a36-4840-bcea-83e4e6002f0b",
      "name": "If"
    }
  ],
  "pinData": {},
  "connections": {
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Chainlink-Not Checking For Stale Prices",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Not Checking For Down L2 Sequencer",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Same Heartbeat Used For Multiple Price Feeds",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Unhandled Depeg Of Bridged Assets",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Incorrect Oracle Price Feed Address",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Price Feeds Not Updated Frequently",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Placing Bets After Randomness Request",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Request Confirmation < Depth of Chain Re-Orgs",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Price Updates Can Be Front-Run",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Assuming Oracle Price Precision",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Unhandled Oracle Revert Denial Of Service",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Returns Incorrect Price During Flash Crashes",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Chainlink-Re-requesting Randomness",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Chainlink-Not Checking For Stale Prices",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Not Checking For Down L2 Sequencer",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Same Heartbeat Used For Multiple Price Feeds",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Unhandled Depeg Of Bridged Assets",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Incorrect Oracle Price Feed Address",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Price Feeds Not Updated Frequently",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Placing Bets After Randomness Request",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Request Confirmation < Depth of Chain Re-Orgs",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Price Updates Can Be Front-Run",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Assuming Oracle Price Precision",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Unhandled Oracle Revert Denial Of Service",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Returns Incorrect Price During Flash Crashes",
            "type": "ai_outputParser",
            "index": 0
          },
          {
            "node": "Chainlink-Re-requesting Randomness",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Chainlink-Not Checking For Stale Prices",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Not Checking For Down L2 Sequencer",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Same Heartbeat Used For Multiple Price Feeds",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Price Feeds Not Updated Frequently",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Incorrect Oracle Price Feed Address",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Unhandled Depeg Of Bridged Assets",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Placing Bets After Randomness Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Request Confirmation < Depth of Chain Re-Orgs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Price Updates Can Be Front-Run",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Re-requesting Randomness",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Returns Incorrect Price During Flash Crashes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Assuming Oracle Price Precision",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Unhandled Oracle Revert Denial Of Service",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge3": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Chainlink-Not Checking For Stale Prices": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chainlink-Not Checking For Down L2 Sequencer": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Chainlink-Same Heartbeat Used For Multiple Price Feeds": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Chainlink-Oracle Price Feeds Not Updated Frequently": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Chainlink-Request Confirmation < Depth of Chain Re-Orgs": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "Chainlink-Assuming Oracle Price Precision": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Chainlink-Incorrect Oracle Price Feed Address": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 6
          }
        ]
      ]
    },
    "Chainlink-Oracle Price Updates Can Be Front-Run": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 7
          }
        ]
      ]
    },
    "Chainlink-Unhandled Oracle Revert Denial Of Service": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 8
          }
        ]
      ]
    },
    "Chainlink-Unhandled Depeg Of Bridged Assets": {
      "main": [
        [
          {
            "node": "Merge4",
            "type": "main",
            "index": 9
          }
        ]
      ]
    },
    "Chainlink-Oracle Returns Incorrect Price During Flash Crashes": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Chainlink-Placing Bets After Randomness Request": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Chainlink-Re-requesting Randomness": {
      "main": [
        [
          {
            "node": "Merge3",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge4": {
      "main": [
        [
          {
            "node": "Merge5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Chainlink-Not Checking For Stale Prices",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Not Checking For Down L2 Sequencer",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Same Heartbeat Used For Multiple Price Feeds",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Price Feeds Not Updated Frequently",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Request Confirmation < Depth of Chain Re-Orgs",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Assuming Oracle Price Precision",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Incorrect Oracle Price Feed Address",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Price Updates Can Be Front-Run",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Unhandled Oracle Revert Denial Of Service",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Unhandled Depeg Of Bridged Assets",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Oracle Returns Incorrect Price During Flash Crashes",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Placing Bets After Randomness Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Chainlink-Re-requesting Randomness",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge5": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "d076c8ce-473f-43bc-b4c4-0d8cfb75aee7",
  "meta": {
    "instanceId": "022db2fbd0a73e6d486f16c5eb885d1053a420197cf4f3857ab5d1742b50c5ad"
  },
  "id": "FbP2WYEVbg2cRrs1",
  "tags": []
}
